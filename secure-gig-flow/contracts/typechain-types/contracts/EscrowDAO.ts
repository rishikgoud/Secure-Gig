/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EscrowDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MIN_TOKEN_BALANCE"
      | "QUORUM_PERCENTAGE"
      | "VOTING_PERIOD"
      | "canVote"
      | "daoToken"
      | "disputeExists"
      | "escrowContract"
      | "finalizeVote"
      | "getActiveVotesCount"
      | "getRequiredQuorum"
      | "getVote"
      | "getVoterChoice"
      | "getVotingPower"
      | "hasVoted"
      | "isVotingActive"
      | "openVote"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateEscrowContract"
      | "updateMinTokenBalance"
      | "vote"
      | "votes"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "QuorumNotMet"
      | "VoteCast"
      | "VoteFinalized"
      | "VoteOpened"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MIN_TOKEN_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUORUM_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canVote",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "daoToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disputeExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveVotesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredQuorum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterChoice",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVotingActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEscrowContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinTokenBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "votes", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "MIN_TOKEN_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUORUM_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disputeExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveVotesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoterChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVotingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEscrowContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumNotMetEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    totalVotes: BigNumberish,
    requiredQuorum: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    totalVotes: bigint,
    requiredQuorum: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    totalVotes: bigint;
    requiredQuorum: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    voter: AddressLike,
    supportFreelancer: boolean,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    voter: string,
    supportFreelancer: boolean,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    voter: string;
    supportFreelancer: boolean;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteFinalizedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    winner: AddressLike,
    totalVotes: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    winner: string,
    totalVotes: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    winner: string;
    totalVotes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteOpenedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EscrowDAO extends BaseContract {
  connect(runner?: ContractRunner | null): EscrowDAO;
  waitForDeployment(): Promise<this>;

  interface: EscrowDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MIN_TOKEN_BALANCE: TypedContractMethod<[], [bigint], "view">;

  QUORUM_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  canVote: TypedContractMethod<[voter: AddressLike], [boolean], "view">;

  daoToken: TypedContractMethod<[], [string], "view">;

  disputeExists: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  escrowContract: TypedContractMethod<[], [string], "view">;

  finalizeVote: TypedContractMethod<
    [escrowId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveVotesCount: TypedContractMethod<[], [bigint], "view">;

  getRequiredQuorum: TypedContractMethod<[], [bigint], "view">;

  getVote: TypedContractMethod<
    [escrowId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, string] & {
        startTime: bigint;
        endTime: bigint;
        votesForFreelancer: bigint;
        votesForClient: bigint;
        totalVotes: bigint;
        finalized: boolean;
        winner: string;
      }
    ],
    "view"
  >;

  getVoterChoice: TypedContractMethod<
    [escrowId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;

  getVotingPower: TypedContractMethod<[voter: AddressLike], [bigint], "view">;

  hasVoted: TypedContractMethod<
    [escrowId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;

  isVotingActive: TypedContractMethod<
    [escrowId: BigNumberish],
    [boolean],
    "view"
  >;

  openVote: TypedContractMethod<[escrowId: BigNumberish], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateEscrowContract: TypedContractMethod<
    [newEscrowContract: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMinTokenBalance: TypedContractMethod<
    [newMinBalance: BigNumberish],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [escrowId: BigNumberish, supportFreelancer: boolean],
    [void],
    "nonpayable"
  >;

  votes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean, string] & {
        escrowId: bigint;
        startTime: bigint;
        endTime: bigint;
        votesForFreelancer: bigint;
        votesForClient: bigint;
        totalVotes: bigint;
        finalized: boolean;
        winner: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MIN_TOKEN_BALANCE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUORUM_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "canVote"
  ): TypedContractMethod<[voter: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "daoToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "disputeExists"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "escrowContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "finalizeVote"
  ): TypedContractMethod<[escrowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveVotesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRequiredQuorum"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVote"
  ): TypedContractMethod<
    [escrowId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, string] & {
        startTime: bigint;
        endTime: bigint;
        votesForFreelancer: bigint;
        votesForClient: bigint;
        totalVotes: bigint;
        finalized: boolean;
        winner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterChoice"
  ): TypedContractMethod<
    [escrowId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingPower"
  ): TypedContractMethod<[voter: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [escrowId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVotingActive"
  ): TypedContractMethod<[escrowId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "openVote"
  ): TypedContractMethod<[escrowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateEscrowContract"
  ): TypedContractMethod<
    [newEscrowContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMinTokenBalance"
  ): TypedContractMethod<[newMinBalance: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [escrowId: BigNumberish, supportFreelancer: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean, string] & {
        escrowId: bigint;
        startTime: bigint;
        endTime: bigint;
        votesForFreelancer: bigint;
        votesForClient: bigint;
        totalVotes: bigint;
        finalized: boolean;
        winner: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "QuorumNotMet"
  ): TypedContractEvent<
    QuorumNotMetEvent.InputTuple,
    QuorumNotMetEvent.OutputTuple,
    QuorumNotMetEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoteFinalized"
  ): TypedContractEvent<
    VoteFinalizedEvent.InputTuple,
    VoteFinalizedEvent.OutputTuple,
    VoteFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "VoteOpened"
  ): TypedContractEvent<
    VoteOpenedEvent.InputTuple,
    VoteOpenedEvent.OutputTuple,
    VoteOpenedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "QuorumNotMet(uint256,uint256,uint256)": TypedContractEvent<
      QuorumNotMetEvent.InputTuple,
      QuorumNotMetEvent.OutputTuple,
      QuorumNotMetEvent.OutputObject
    >;
    QuorumNotMet: TypedContractEvent<
      QuorumNotMetEvent.InputTuple,
      QuorumNotMetEvent.OutputTuple,
      QuorumNotMetEvent.OutputObject
    >;

    "VoteCast(uint256,address,bool,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoteFinalized(uint256,address,uint256)": TypedContractEvent<
      VoteFinalizedEvent.InputTuple,
      VoteFinalizedEvent.OutputTuple,
      VoteFinalizedEvent.OutputObject
    >;
    VoteFinalized: TypedContractEvent<
      VoteFinalizedEvent.InputTuple,
      VoteFinalizedEvent.OutputTuple,
      VoteFinalizedEvent.OutputObject
    >;

    "VoteOpened(uint256,uint256,uint256)": TypedContractEvent<
      VoteOpenedEvent.InputTuple,
      VoteOpenedEvent.OutputTuple,
      VoteOpenedEvent.OutputObject
    >;
    VoteOpened: TypedContractEvent<
      VoteOpenedEvent.InputTuple,
      VoteOpenedEvent.OutputTuple,
      VoteOpenedEvent.OutputObject
    >;
  };
}
