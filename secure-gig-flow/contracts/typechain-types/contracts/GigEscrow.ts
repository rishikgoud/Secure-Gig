/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace GigEscrow {
  export type EscrowDataStruct = {
    gigId: BigNumberish;
    client: AddressLike;
    freelancer: AddressLike;
    amount: BigNumberish;
    status: BigNumberish;
    createdAt: BigNumberish;
    gigTitle: string;
    exists: boolean;
  };

  export type EscrowDataStructOutput = [
    gigId: bigint,
    client: string,
    freelancer: string,
    amount: bigint,
    status: bigint,
    createdAt: bigint,
    gigTitle: string,
    exists: boolean
  ] & {
    gigId: bigint;
    client: string;
    freelancer: string;
    amount: bigint;
    status: bigint;
    createdAt: bigint;
    gigTitle: string;
    exists: boolean;
  };
}

export interface GigEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "clientEscrows"
      | "createEscrow"
      | "emergencyWithdraw"
      | "escrowExists"
      | "escrows"
      | "feeRecipient"
      | "freelancerEscrows"
      | "getClientEscrows"
      | "getContractBalance"
      | "getEscrow"
      | "getFreelancerEscrows"
      | "getTotalEscrows"
      | "owner"
      | "pause"
      | "paused"
      | "platformFee"
      | "refundEscrow"
      | "releaseEscrow"
      | "releaseTo"
      | "renounceOwnership"
      | "startWork"
      | "transferOwnership"
      | "unpause"
      | "updateFeeRecipient"
      | "updatePlatformFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EscrowCreated"
      | "EscrowFunded"
      | "EscrowRefunded"
      | "EscrowReleased"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "clientEscrows",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrow",
    values: [BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrows",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freelancerEscrows",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClientEscrows",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreelancerEscrows",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalEscrows",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseTo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startWork",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "clientEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freelancerEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClientEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEscrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFreelancerEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "releaseTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
}

export namespace EscrowCreatedEvent {
  export type InputTuple = [
    gigId: BigNumberish,
    client: AddressLike,
    freelancer: AddressLike,
    amount: BigNumberish,
    gigTitle: string
  ];
  export type OutputTuple = [
    gigId: bigint,
    client: string,
    freelancer: string,
    amount: bigint,
    gigTitle: string
  ];
  export interface OutputObject {
    gigId: bigint;
    client: string;
    freelancer: string;
    amount: bigint;
    gigTitle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowFundedEvent {
  export type InputTuple = [
    gigId: BigNumberish,
    client: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [gigId: bigint, client: string, amount: bigint];
  export interface OutputObject {
    gigId: bigint;
    client: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowRefundedEvent {
  export type InputTuple = [
    gigId: BigNumberish,
    client: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [gigId: bigint, client: string, amount: bigint];
  export interface OutputObject {
    gigId: bigint;
    client: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowReleasedEvent {
  export type InputTuple = [
    gigId: BigNumberish,
    freelancer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [gigId: bigint, freelancer: string, amount: bigint];
  export interface OutputObject {
    gigId: bigint;
    freelancer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GigEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): GigEscrow;
  waitForDeployment(): Promise<this>;

  interface: GigEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  clientEscrows: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  createEscrow: TypedContractMethod<
    [gigId: BigNumberish, freelancer: AddressLike, gigTitle: string],
    [void],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [gigId: BigNumberish],
    [void],
    "nonpayable"
  >;

  escrowExists: TypedContractMethod<[gigId: BigNumberish], [boolean], "view">;

  escrows: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, string, boolean] & {
        gigId: bigint;
        client: string;
        freelancer: string;
        amount: bigint;
        status: bigint;
        createdAt: bigint;
        gigTitle: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  freelancerEscrows: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getClientEscrows: TypedContractMethod<
    [client: AddressLike],
    [bigint[]],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getEscrow: TypedContractMethod<
    [gigId: BigNumberish],
    [GigEscrow.EscrowDataStructOutput],
    "view"
  >;

  getFreelancerEscrows: TypedContractMethod<
    [freelancer: AddressLike],
    [bigint[]],
    "view"
  >;

  getTotalEscrows: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  refundEscrow: TypedContractMethod<
    [gigId: BigNumberish],
    [void],
    "nonpayable"
  >;

  releaseEscrow: TypedContractMethod<
    [gigId: BigNumberish],
    [void],
    "nonpayable"
  >;

  releaseTo: TypedContractMethod<
    [gigId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  startWork: TypedContractMethod<[gigId: BigNumberish], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateFeeRecipient: TypedContractMethod<
    [newRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "clientEscrows"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createEscrow"
  ): TypedContractMethod<
    [gigId: BigNumberish, freelancer: AddressLike, gigTitle: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[gigId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "escrowExists"
  ): TypedContractMethod<[gigId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "escrows"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, string, boolean] & {
        gigId: bigint;
        client: string;
        freelancer: string;
        amount: bigint;
        status: bigint;
        createdAt: bigint;
        gigTitle: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "freelancerEscrows"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClientEscrows"
  ): TypedContractMethod<[client: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEscrow"
  ): TypedContractMethod<
    [gigId: BigNumberish],
    [GigEscrow.EscrowDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFreelancerEscrows"
  ): TypedContractMethod<[freelancer: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalEscrows"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundEscrow"
  ): TypedContractMethod<[gigId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseEscrow"
  ): TypedContractMethod<[gigId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseTo"
  ): TypedContractMethod<
    [gigId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startWork"
  ): TypedContractMethod<[gigId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeRecipient"
  ): TypedContractMethod<[newRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EscrowCreated"
  ): TypedContractEvent<
    EscrowCreatedEvent.InputTuple,
    EscrowCreatedEvent.OutputTuple,
    EscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowFunded"
  ): TypedContractEvent<
    EscrowFundedEvent.InputTuple,
    EscrowFundedEvent.OutputTuple,
    EscrowFundedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowRefunded"
  ): TypedContractEvent<
    EscrowRefundedEvent.InputTuple,
    EscrowRefundedEvent.OutputTuple,
    EscrowRefundedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowReleased"
  ): TypedContractEvent<
    EscrowReleasedEvent.InputTuple,
    EscrowReleasedEvent.OutputTuple,
    EscrowReleasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "EscrowCreated(uint256,address,address,uint256,string)": TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;
    EscrowCreated: TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;

    "EscrowFunded(uint256,address,uint256)": TypedContractEvent<
      EscrowFundedEvent.InputTuple,
      EscrowFundedEvent.OutputTuple,
      EscrowFundedEvent.OutputObject
    >;
    EscrowFunded: TypedContractEvent<
      EscrowFundedEvent.InputTuple,
      EscrowFundedEvent.OutputTuple,
      EscrowFundedEvent.OutputObject
    >;

    "EscrowRefunded(uint256,address,uint256)": TypedContractEvent<
      EscrowRefundedEvent.InputTuple,
      EscrowRefundedEvent.OutputTuple,
      EscrowRefundedEvent.OutputObject
    >;
    EscrowRefunded: TypedContractEvent<
      EscrowRefundedEvent.InputTuple,
      EscrowRefundedEvent.OutputTuple,
      EscrowRefundedEvent.OutputObject
    >;

    "EscrowReleased(uint256,address,uint256)": TypedContractEvent<
      EscrowReleasedEvent.InputTuple,
      EscrowReleasedEvent.OutputTuple,
      EscrowReleasedEvent.OutputObject
    >;
    EscrowReleased: TypedContractEvent<
      EscrowReleasedEvent.InputTuple,
      EscrowReleasedEvent.OutputTuple,
      EscrowReleasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
